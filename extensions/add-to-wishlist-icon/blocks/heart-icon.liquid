<div
  x-data="wishlist"
  x-init="init()"
  x-cloak
  class="catalog-heart"
  data-customer-id="{{ customer.id }}"
>
  <template x-if="!isWishlisted">
    <div>
      <svg
        @click="toggleWishlist()"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        class="icon-heart"
        aria-hidden="true"
      >
        <path
          d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5
             2 5.42 4.42 3 7.5 3c1.74 0 3.41 0.81 4.5 2.09
             C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5
             c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"
        />
      </svg>
    </div>
  </template>

  <template x-if="isWishlisted">
    <div>
      <svg
        @click="toggleWishlist()"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        class="icon-heart filled"
        aria-hidden="true"
      >
        <path
          d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5
             2 5.42 4.42 3 7.5 3c1.74 0 3.41 0.81 4.5 2.09
             C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5
             c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"
        />
      </svg>
    </div>
  </template>
</div>

<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

  
<script>
  // Initialize Toastr with custom settings
  toastr.options = {
    "closeButton": true,
    "debug": false,
    "newestOnTop": true,
    "progressBar": true,
    "positionClass": "toast-top-right",
    "preventDuplicates": false,
    "onclick": null,
    "showDuration": "300",
    "hideDuration": "1000",
    "timeOut": "3000",
    "extendedTimeOut": "1000",
    "showEasing": "swing",
    "hideEasing": "linear",
    "showMethod": "fadeIn",
    "hideMethod": "fadeOut"
  };
  document.addEventListener('alpine:init', () => {
    Alpine.data('wishlist', () => ({
      apiUrl : "https://wishlist-remix-app-yxat.onrender.com",
      customerId: null,
      productId: null,
      productTitle: null,
      price: null,
      delete_id : null,
      wishlist: [],
      allWishlistData: [],
      isWishlisted: false,

  async init() {
    this.customerId = this.$el.dataset.customerId && this.$el.dataset.customerId.trim() ? this.$el.dataset.customerId.trim() : null;
    const parentElement = this.$el.closest('.catalog-heart-container');
    if (parentElement) {
      this.productImage = parentElement.dataset.productImg || null;
    } else {
      this.productImage = null;
    }
    await this.fetchWishlist();
    if (parentElement) {
        const parentProductId = parentElement.dataset.productId;
        this.productId = parentProductId;
        this.isWishlisted = this.wishlist.includes(String(parentProductId));
    } else {
        console.log('Parent div with class "catalog-heart-container" not found');
    }
  },

  async fetchWishlist() {
    const isLoggedIn = this.customerId !== null && this.customerId.trim() !== '';
    if (isLoggedIn) {
      try {
        // include credentials so cookies are sent/accepted
        const url = `${this.apiUrl}/api/wishlist${this.customerId ? `?customerId=${this.customerId}` : ''}`;
        const res  = await fetch(url, { credentials: "include" });
        if (!res.ok) {
          console.error("Failed to fetch wishlist:", res.status);
          return;
        }
        const data = await res.json();
        this.allWishlistData = data.wishlists || [];
        // normalize wishlist as array of productIds (string)
        this.wishlist = this.allWishlistData.map(item => String(item.productId || item.id));
      } catch (e) {
        console.error("Error fetching wishlist:", e);
      }
    } else {
      // Guest user: load from localStorage
      const guestWishlist = JSON.parse(localStorage.getItem('guestWishlist') || '[]');
      this.allWishlistData = guestWishlist;
      this.wishlist = guestWishlist.map(item => String(item.productId));
    }
  },

  toggleWishlist() {
    this.isWishlisted ? this.remove() : this.addtoWishlist();
  },

  addtoWishlist() {
    const parentElement = this.$el.closest('.catalog-heart-container');
    if (parentElement) {
      this.productTitle = parentElement.dataset.productTitle;
      this.price = parentElement.dataset.price;
      this.productImage = parentElement.dataset.productImg || null;
    }

    // Optimistically update UI
    this.isWishlisted = true;

    // Determine if user is logged in based on customerId presence
    const isLoggedIn = this.customerId !== null && this.customerId.trim() !== '';

    if (isLoggedIn) {
      // send formData (works for logged-in)
      var formData = new FormData();
      formData.append('customerId', this.customerId);
      formData.append('isLoggedIn', 'true');
      formData.append('productId', this.productId);
      formData.append("productTitle", this.productTitle);
      formData.append("quantity", "1");
      formData.append("price", this.price);
      formData.append("shop", "{{shop.permanent_domain}}");
      formData.append("productImage", this.productImage);
      formData.append("_action", "CREATE");

      var requestOptions = {
        method:"POST",
        body: formData,
        redirect: 'follow',
        credentials: "include" // important for cookie flows
      };

      fetch(this.apiUrl + "/api/wishlist", requestOptions)
        .then(async (result) => {
          if (result.ok) {
            // update local state based on returned wishlists if provided
            const response = await result.json().catch(() => ({}));
            if (response.wishlists) {
              this.allWishlistData = response.wishlists;
              this.wishlist = this.allWishlistData.map(item => String(item.productId || item.id));
            }
            toastr.success('Item added to Wishlist!', 'Success', {
              timeOut: 2000,
              positionClass: "toast-top-right"
            });
            this.$dispatch('wishlist-updated', { action: 'add' });
            this.refresh();
            this.productTitle = null;
            this.price = null;
          } else {
            console.error("Add to wishlist failed", result.status);
            this.isWishlisted = false; // Revert on failure
            this.$dispatch('wishlist-updated', { action: 'remove' }); // Revert counter
            toastr.error('Failed to add to wishlist', 'Error');
          }
        })
        .catch(error => {
          console.error("error : ",error);
          this.isWishlisted = false; // Revert on failure
          this.$dispatch('wishlist-updated', { action: 'remove' }); // Revert counter
          toastr.error('Error adding to wishlist', 'Error');
        });
    } else {
      // Guest user: save to localStorage
      const guestWishlist = JSON.parse(localStorage.getItem('guestWishlist') || '[]');
      const existingIndex = guestWishlist.findIndex(item => item.productId === this.productId);
      if (existingIndex >= 0) {
        guestWishlist[existingIndex].quantity += 1;
      } else {
        guestWishlist.push({
          productId: this.productId,
          productTitle: this.productTitle,
          price: this.price,
          productImage: this.productImage,
          quantity: 1,
          shop: "{{shop.permanent_domain}}"
        });
      }
      localStorage.setItem('guestWishlist', JSON.stringify(guestWishlist));
      this.allWishlistData = guestWishlist;
      this.wishlist = guestWishlist.map(item => String(item.productId));
      toastr.success('Item added to Wishlist!', 'Success', {
        timeOut: 2000,
        positionClass: "toast-top-right"
      });
      this.$dispatch('wishlist-updated', { action: 'add' });
      this.refresh();
      this.productTitle = null;
      this.price = null;
    }
  },

      async remove() {
        // Optimistically update UI
        this.isWishlisted = false;

        // Determine if user is logged in based on customerId presence
        const isLoggedIn = this.customerId !== null && this.customerId.trim() !== '';

        if (isLoggedIn) {
          const formData = new FormData();
          formData.append('customerId', this.customerId);
          formData.append('isLoggedIn', 'true');
          formData.append('productId', this.productId);
          formData.append('shop', "{{shop.permanent_domain}}");
          formData.append('_action', 'DELETE');

          const requestOptions = {
            method: "POST",
            body: formData,
            redirect: 'follow',
            credentials: "include"
          };

          try {
            const res = await fetch(`${this.apiUrl}/api/wishlist`, requestOptions);
            const data = await res.json();

            if (res.ok && data.ok) {
              toastr.success('Item removed from Wishlist!', 'Success', {
                timeOut: 2000,
                positionClass: "toast-top-right"
              });
              this.$dispatch('wishlist-updated', { action: 'remove' });
              await this.refresh();
            } else {
              this.isWishlisted = true; // Revert on failure
              this.$dispatch('wishlist-updated', { action: 'add' }); // Revert counter
              throw new Error(data.message || 'Failed to remove item');
            }
          } catch (err) {
            console.error('Failed to remove wishlist item:', err);
            this.isWishlisted = true; // Revert on failure
            this.$dispatch('wishlist-updated', { action: 'add' }); // Revert counter
            toastr.error('Failed to remove from wishlist', 'Error');
          }
        } else {
          // Guest user: remove from localStorage
          const guestWishlist = JSON.parse(localStorage.getItem('guestWishlist') || '[]');
          const existingIndex = guestWishlist.findIndex(item => item.productId === this.productId);
          if (existingIndex >= 0) {
            if (guestWishlist[existingIndex].quantity > 1) {
              guestWishlist[existingIndex].quantity -= 1;
            } else {
              guestWishlist.splice(existingIndex, 1);
            }
            localStorage.setItem('guestWishlist', JSON.stringify(guestWishlist));
            this.allWishlistData = guestWishlist;
            this.wishlist = guestWishlist.map(item => String(item.productId));
            toastr.success('Item removed from Wishlist!', 'Success', {
              timeOut: 2000,
              positionClass: "toast-top-right"
            });
            this.$dispatch('wishlist-updated', { action: 'remove' });
            await this.refresh();
          } else {
            // Item not found, revert
            this.isWishlisted = true;
            this.$dispatch('wishlist-updated', { action: 'add' });
            toastr.error('Item not found in wishlist', 'Error');
          }
        }
      },

      async refresh() {
        try {
          await this.fetchWishlist();
          this.isWishlisted = this.wishlist.includes(String(this.productId));
        } catch (e) {
          console.error("Error refreshing wishlist:", e);
        }
      },
    }));
  });
</script>

<style>
  .icon-heart {
    width: 24px;
    height: 24px;
    fill: none;
    stroke: black;
    stroke-width: 2;
    transition: fill 0.3s ease, stroke 0.3s ease;
    cursor: pointer;
  }
  .icon-heart.filled {
    fill: lightgreen;
    stroke: lightgreen;
  }
</style>

<style>
#toast-container > .toast {
  background-color: #fff !important;
  border: 1px solid #ddd;
  color: #333;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
  opacity: 1 !important;
  border-radius: 6px;
  z-index: 9999;
}

#toast-container > .toast-success {
  border-left: 4px solid #5e8e3e;
}

#toast-container > .toast-error {
  border-left: 4px solid #d72c0d;
}

#toast-container > .toast-warning {
  border-left: 4px solid #e6a700;
}
</style>

{% schema %}
{
  "name": "Heart Icon",
  "target": "section",
  "settings": [
    { "type": "product", "id": "product", "label": "product", "autofill": true }
  ]
}
{% endschema %}
